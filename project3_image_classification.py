# -*- coding: utf-8 -*-
"""project3 image classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lwfqi_qXXFXlRn0gnT0121N3ni_f9WW6
"""

import os
import tensorflow as tf
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,Dropout
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
import cv2



from google.colab import drive

drive.mount('/content/drive',force_remount=True)

!unzip '/content/drive/MyDrive/dataset/archive.zip' -d '/content/sample_data/dataset'

mainPath = '/content/sample_data/dataset/dataset'

trainPath = os.path.join(mainPath,'train')

for i in os.listdir(trainPath):
  print(i)

for index,nameFolder in enumerate(os.listdir(trainPath)):
  lenFile = len(os.listdir(os.path.join(trainPath,nameFolder)))
  foto = cv2.cvtColor(cv2.imread(os.path.join(os.path.join(trainPath,nameFolder),os.listdir(os.path.join(trainPath,nameFolder))[0])),cv2.COLOR_BGR2RGB)
  print(f"{nameFolder} : {lenFile}, resolusi : {foto.shape}")
  plt.subplot(1,6,index+1)
  plt.imshow(foto)

os.path.join(os.path.join(trainPath,nameFolder),os.listdir(os.path.join(trainPath,nameFolder))[0])

os.path.join(os.path.join(trainPath,nameFolder),os.listdir(os.path.join(trainPath,nameFolder))[0])

imageDataGen = ImageDataGenerator(rescale=1./255,validation_split=0.05) # no augmentation , the data has already had the rotate one

trainData = imageDataGen.flow_from_directory(trainPath,target_size=(200,200),subset='training')

testData = imageDataGen.flow_from_directory(trainPath,target_size=(200,200),subset='validation')

trainData.class_indices

model = tf.keras.Sequential([
    Conv2D(64,[3,3],activation='relu',input_shape=(200,200,3)),
    MaxPooling2D(),
    Conv2D(64,[3,3],activation='relu'),
    MaxPooling2D(),
    Conv2D(64,[3,3],activation='relu'),
    MaxPooling2D(),
    tf.keras.layers.GlobalAveragePooling2D(),
    Dense(25,activation='relu'),
    Dropout(0.4),
    Dense(6,activation='softmax')
])
model.compile(loss="categorical_crossentropy",
              optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),
              metrics=['accuracy'])

model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_accuracy')>0.85 and logs.get('accuracy')>0.9):
      print("val_accuracy has been 85%")
      self.model.stop_training = True
callbacks = myCallback()

history = model.fit(trainData,epochs=100,verbose=1,callbacks=[callbacks],validation_data=testData)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.legend(['train','test'])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train','test'])

savedModelPath = '/content/sample_data/saveModels'
tf.saved_model.save(model, savedModelPath)

model.save('/content/sample_data/models.h5')

!pip install tensorflowjs

!tensorflowjs_converter --input_format=keras /content/sample_data/models.h5 /content/sample_data/modelas1

converter = tf.lite.TFLiteConverter.from_saved_model(savedModelPath)
tflite_model = converter.convert()

with open('model.tflite', 'wb') as f:
  f.write(tflite_model)